source('C:/Users/sgpmocau/Dropbox/Early.UCSD/Early.UCSD/Code/Online/Code/Optimization/Others/optimization.simple.R', echo=TRUE)
source('C:/Users/sgpmocau/Dropbox/Early.UCSD/Early.UCSD/Code/Online/Code/Optimization/Others/optimization.simple.R', echo=TRUE)
source('C:/Users/sgpmocau/Dropbox/Early.UCSD/Early.UCSD/Code/Online/Code/Optimization/Others/optimization.simple.R', echo=TRUE)
source('C:/Users/sgpmocau/Dropbox/Early.UCSD/Early.UCSD/Code/Online/Code/Optimization/Others/optimization.simple.R', echo=TRUE)
source('C:/Users/sgpmocau/Dropbox/Early.UCSD/Early.UCSD/Code/Online/Code/Optimization/Others/optimization.simple.R', echo=TRUE)
source("selectsimple.R")
source("selectsimple.R")
source("selectsimple.R")
source("selectsimple.R")
numbd<-4
lambda <- 0.1
rep <- 0 #For regularization change to 1
regtype <- 1 # For L0
#regtype <- 2 # For L1
numrep <- 4 #Number of repetition (30 in paper)
costtype <- 1 #for 0-1 accuracy cost
alg <- 3 # For genetic algorithm
alpha <- 0.8
source("selectsimple.R")
numbd<-4
lambda <- 0.1
reg <- 0 #For regularization change to 1
regtype <- 1 # For L0
#regtype <- 2 # For L1
numrep <- 4 #Number of repetition (30 in paper)
costtype <- 1 #for 0-1 accuracy cost
alg <- 3 # For genetic algorithm
alpha <- 0.8
source("selectsimple.R")
regparams <- c(9)
regparams <- c(0)
regparams!=0
source('C:/Users/sgpmocau/Dropbox/Early.UCSD/Early.UCSD/Code/Online/Code/Optimization/Others/optimization.simple.R', echo=TRUE)
source("selectsimple.R")
load(paste("../../../Results/Rules/Others/simpleresult-",numbd,"-",alg,"-",costtype,"-",alpha,"-",rep,"-",regtype,"-",lambda,".RData",sep=""))
rep
aux[i]<-which.min(abs(results-median(results)))
aux
aux
source("selectsimple.R")
aux<-regparams*NA
cost<-c(1:10)*NA
i<-1
j<-1
regparams
results<-c(1:numrep)*NA
for(rep in c(1:numrep)){
load(paste("../../../Results/Rules/Others/simpleresult-",numbd,"-",alg,"-",costtype,"-",alpha,"-",rep,"-",regtype,"-",lambda,".RData",sep=""))
if(alg==3){
results[rep]<-result@fitnessValue
}else{
results[rep]<-result$value
}
}
aux[i]<-which.min(abs(results-median(results)))
load(paste("../../../Results/Rules/Others/simpleresult-",numbd,"-",alg,"-",costtype,"-",alpha,"-",aux[i],"-",regtype,"-",lambda,".RData",sep=""))
if(lambda==0){
save(result,file=paste("../../../Results/Rules/Others/NoReg/simpleresult-",numbd,"-",alg,"-",costtype,"-",alpha,"-", 1,".RData",sep=""))
i<-i+1
}else{
#Calcular su coste, eliminado la parte de la regularizacion
if(regtype==1){
cost[j]<-result@fitnessValue+lambda*(sum(result@solution!=0))
}
else{
cost[j]<-result@fitnessValue+lambda*(sum(abs(result@solution)))
}
i<-i+1
j<-j+1
}
source("selectsimple.R")
source("selectsimple.R")
source('C:/Users/sgpmocau/Dropbox/Early.UCSD/Early.UCSD/Code/Online/Code/Optimization/Others/selectsimple.R', echo=TRUE)
aux<-regparams*NA
cost<-c(1:10)*NA
i<-1
j<-1
for(lambda in c(regparams)){
results<-c(1:numrep)*NA
for(rep in c(1:numrep)){
load(paste("../../../Results/Rules/Others/simpleresult-",numbd,"-",alg,"-",costtype,"-",alpha,"-",rep,"-",regtype,"-",lambda,".RData",sep=""))
if(alg==3){
results[rep]<-result@fitnessValue
}else{
results[rep]<-result$value
}
}
#Para cada lamdba guardar la repetici?n con coste mediano
aux[i]<-which.min(abs(results-median(results)))
#Para cada lambda, cargar la repeticiÃÂ³n con el coste median
load(paste("../../../Results/Rules/Others/simpleresult-",numbd,"-",alg,"-",costtype,"-",alpha,"-",aux[i],"-",regtype,"-",lambda,".RData",sep=""))
if(lambda==0){
save(result,file=paste("../../../Results/Rules/Others/NoReg/simpleresult-",numbd,"-",alg,"-",costtype,"-",alpha,"-", regtype,".RData",sep=""))
i<-i+1
}else{
#Calcular su coste, eliminado la parte de la regularizaciÃÂ³n
if(regtype==1){
cost[j]<-result@fitnessValue+lambda*(sum(result@solution!=0))
}
else{
cost[j]<-result@fitnessValue+lambda*(sum(result@solution))
}
i<-i+1
j<-j+1
}
}
cost
source("selectsimple.R")
