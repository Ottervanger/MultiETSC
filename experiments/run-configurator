#!/bin/bash
set -e
# change dir to script location
cd "${0%/*}"

# config
VALIDATION="--folds=5"
MAX_R=10
UCR="/vol/share/groups/liacs/scratch/UCR/"

# default arguments
SEED=1
DATASET="ECG200"
TIMEOUT="7200"
CUTOFF="180"
METHOD="mo"
ALGO="all"
DOCONF=true
WRAPPER="./wrapper"

while [[ $# -gt 0 ]]; do
case "$1" in
    --seed|-s)
        SEED="$2"
        shift; shift
        ;;
    --dataset|--data|-d)
        DATASET="$2"
        shift; shift
        ;;
    --timeout|--time|-t)
        TIMEOUT="$2"
        shift; shift
        ;;
    --cutoff-time|--cutoff|-c)
        CUTOFF="$2"
        shift; shift
        ;;
    --SO)
        METHOD="so"
        shift
        ;;
    --algorithm|--algo)
        ALGO="$2"
        shift; shift
        ;;
    --no-conf)
        DOCONF=false
        shift
        ;;
    *)
        shift
        ;;
esac
done

SMAC="python ../smac/smac \
        --verbose_level DEBUG \
        --maxR ${MAX_R}"
PARAMILS="../paramils/paramils \
        --validation false \
        --MO true \
        --rungroup run_${SEED} \
        --log-details true \
        --max-runs ${MAX_R}"

if [[ $METHOD == "so" ]]; then
    CONFIGURATOR="${SMAC}"
    WRAPPER="./wrapper --MO false"
else
    CONFIGURATOR="${PARAMILS}"
fi

# computed file locations
ABS_PATH_TRAIN=$UCR$DATASET"/"$DATASET"_TRAIN.tsv"
ABS_PATH_TEST=$UCR$DATASET"/"$DATASET"_TEST.tsv"

# Produce train-validate split from training data
INSTANCE=$(python util/validationsplitter.py "$VALIDATION" --seed=$SEED "$ABS_PATH_TRAIN")
CONDITION="${DATASET}-${METHOD}-${ALGO}"
CONF_OUT="output/configurator/${CONDITION}"
mkdir -p "${CONF_OUT}"

if $DOCONF ; then
    # Start the configurator
    ${CONFIGURATOR} --scenario "scenario.txt" \
                    --algo "$WRAPPER" \
                    --seed "$SEED" \
                    --instance-file "$INSTANCE" \
                    --wallclock-limit "$TIMEOUT" \
                    --cutoff-time "$CUTOFF" \
                    --deterministic 0 \
                    --run-obj "quality" \
                    --overall-obj "mean" \
                    --execdir "../experiments/" \
                    --output-dir "../experiments/${CONF_OUT}" \
                    --param-file "pcs/${METHOD}-${ALGO}.pcs"
fi

# note that we use mo validation regardless of the optimization method
echo "Starting off-line validation"
VALID_OUT="output/validation/${CONDITION}/run_${SEED}.csv"
mkdir -p "$(dirname "${VALID_OUT}")"
CONFIGS="${CONF_OUT}/run_${SEED}/configs${SEED}.txt"
if [[ $METHOD == "so" ]]; then
    rm -rf "${CONF_OUT}/*.OLD"
    ../smac/configs.py "${CONF_OUT}/run_${SEED}/traj.json" > "${CONFIGS}"
fi
>"${VALID_OUT}"
while read CONF; do
    while read data_i; do
        (echo $(./wrapper --MO "true" $data_i 0 9999 0 $SEED $CONF -np 1)", $CONF" | tee -a "$VALID_OUT") &
        sleep 0.1
        while [[ $(grep -oP 'running \K[0-9]*' /proc/stat) -ge $(grep -c 'processor' /proc/cpuinfo) ]]; do
            sleep 1
        done
    done<"${INSTANCE}"
done<"${CONFIGS}"
# wait for parallel jobs to finish
wait

