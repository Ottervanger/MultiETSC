#!/bin/bash
set -e
# change dir to script location
cd "${0%/*}"

# config
VALIDATION="--folds=5"
UCR="/vol/share/groups/liacs/scratch/UCR/"
NVALID=10

# default arguments
SEED=1
DATASET="ECG200"
TIMEOUT="3600"
CUTOFF="60"
METHOD="mo"
CONFIGURATOR="../paramils/paramils --log-details true"
DOCONF=true

# TODO
# Everything is identified based on the seed. This is not a proper id. Ids
# should be generated by hashing the config. Intermediary results should be 
# saved and retrived based on this id to prevent redundant computation.

while [[ $# -gt 0 ]]; do
case "$1" in
    --seed|-s)
        SEED="$2"
        shift; shift
        ;;
    --dataset|--data|-d)
        DATASET="$2"
        shift; shift
        ;;
    --timeout|--time|-t)
        TIMEOUT="$2"
        shift; shift
        ;;
    --cutoff-time|--cutoff|-c)
        CUTOFF="$2"
        shift; shift
        ;;
    --SO)
        METHOD="so"
        CONFIGURATOR="python ../smac/smac --verbose_level DEBUG"
        shift
        ;;
    --no-conf)
        DOCONF=false
        shift
        ;;
    *)
        shift
        ;;
esac
done

# computed file locations
ABS_PATH_TRAIN=$UCR$DATASET"/"$DATASET"_TRAIN.tsv"
ABS_PATH_TEST=$UCR$DATASET"/"$DATASET"_TEST.tsv"

if [[ $METHOD == "mo" ]]; then
    CONFIGURATOR="${CONFIGURATOR} --rungroup run_${SEED}"
fi

# Produce train-validate split from training data
INSTANCE=$(python util/validationsplitter.py "$VALIDATION" --seed=$SEED "$ABS_PATH_TRAIN")

if $DOCONF ; then
    # Start the configurator
    ${CONFIGURATOR} --scenario "${METHOD}scenario.txt" \
                    --seed "$SEED" \
                    --instance_file "$INSTANCE" \
                    --wallclock-limit "$TIMEOUT" \
                    --cutoff-time "$CUTOFF"
fi

# note that we use mo validation regardless of the optimization method
configs=$(realpath "output/${METHOD}/run_${SEED}/configs${SEED}.txt")
validation_out=$(realpath "output/validation/${DATASET}-${METHOD}-${TIMEOUT}-${SEED}.csv")

if [[ $METHOD == "so" ]]; then
    rm -rf output/so/*.OLD
    ../smac/configs.py "output/so/run_${SEED}/traj.json" > "${configs}"
fi

echo "Starting off-line validation"
>"$validation_out"
while read conf; do
    while read data_i; do
        (echo $(./wrapper --MO "true" $data_i 0 9999 0 $SEED $conf -np 1)", $conf" | tee -a "$validation_out") &
        sleep 1
        while [[ $(grep -oP 'running \K[0-9]*' /proc/stat) -ge $(grep -c 'processor' /proc/cpuinfo) ]]; do
            sleep 1
        done
    done<$INSTANCE
done<"${configs}"

# wait for parallel jobs to finish
for p in `jobs -p`; do
    wait $p
done
